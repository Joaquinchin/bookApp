name: Docker – Build & Publish (GHCR)

on:
  push:
    branches: [main, master]

permissions:
  contents: read
  packages: write   #publicar en GHCR
  pull-requests: write  # para comentar si viene de PR

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker:
    name: Build & Push image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (Opcional) obtener versión desde package.json para tag vX.Y.Z
      - name: Read version
        id: meta
        run: echo "version=$(node -p \"require('./package.json').version\")" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/bookapp
          SHA=${{ github.sha }}
          VER=${{ steps.meta.outputs.version }}

          docker build -t $IMAGE:latest -t $IMAGE:v$VER -t $IMAGE:$SHA .
          docker push $IMAGE:latest
          docker push $IMAGE:v$VER
          docker push $IMAGE:$SHA

      # Comentario de éxito en Docker build
      - name: Comment Docker Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const sha = '${{ github.sha }}'.substring(0, 7);
            const version = '${{ steps.meta.outputs.version }}';
            const image = 'ghcr.io/${{ github.repository_owner }}/bookapp';
            
            // Si es un PR, comenta ahí, sino busca PRs relacionados
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `**Docker imagen creada exitosamente!** \n\n` +
                      `**Imágenes disponibles:**\n` +
                      `- \`${image}:latest\`\n` +
                      `- \`${image}:v${version}\`\n` +
                      `- \`${image}:${sha}\`\n\n` +
                      `**Para ejecutar localmente:**\n` +
                      `\`\`\`bash\n` +
                      `docker run -p 3000:3000 ${image}:latest\n` +
                      `\`\`\`\n\n` +
                      `[Ver en GitHub Container Registry](https://ghcr.io/${{ github.repository_owner }}/bookapp)`
              });
            }
            
      #  Comentario de error en Docker build  
      - name: Comment Docker Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `**Docker build falló!** \n\n` +
                      `**Posibles causas:**\n` +
                      `- Error en el Dockerfile\n` +
                      `- Problema con las dependencias en el container\n` +
                      `- Error de permisos en GitHub Container Registry\n\n` +
                      `[Ver logs detallados](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n` +
                      `**Tip:** Ejecuta \`docker build . -t test\` localmente para reproducir el error.`
              });
            }
